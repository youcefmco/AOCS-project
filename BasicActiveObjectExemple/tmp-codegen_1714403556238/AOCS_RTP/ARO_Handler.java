// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package AOCS_RTP;

/************************************************************/
/**
 * 
 */
public class ARO_Handler {
	/**
	 * 
	 */
	public enum FLAG_STATES {
		/**
		 * 
		 */
		NoFlag,
		/**
		 * 
		 */
		DecFlag,
		/**
		 * 
		 */
		ReconfigFlag;
	};

	/**
	 * 
	 */
	public enum RECONFIG_STATES {
		/**
		 * 
		 */
		RCON_NO_RECONFIG,
		/**
		 * RCON_RECONFIG1 sets reconfiguration for a ARO Error
		  * 
		 */
		RCON_RECONFIG1,
		/**
		 * RCON_RECONFIG2 sets reconfiguration for a Math Error
		 */
		RCON_RECONFIG2,
		/**
		 * 
		 */
		RCON_RECONFIG3;
	};

	/**
	 * If reconfiguration Enabled (true) when ARO counter reaching 0
	 */
	public boolean ARO_isReconfigEnabled = false;
	/**
	 * Sets the current ARO max value for a given mode
	  * For DTM, YTM, CPM the counter is set to 300
	  * For NOM the counter is set to 600
	 */
	private int[] ARO_counterMax = new int[] {
			/*SBM DTM YTM CPM NOM */
			0, 300, 300, 300, 600 };
	/**
	 * (ARO) counter keeps track of recurring errors within the AOCS system
	 */
	private int ARO_counter = 100;
	/**
	 * 
	 */
	public RECONFIG_STATES ARO_reconfigState;
	/**
	 * 
	 */
	public long[] AROH_holdOffPeriod = new long[] {
			/* SBM DTM YTM CPM NOM */
			300, 300, 300, 300, 300 };
	/**
	 * ARO hold off time
	 */
	public long ARO_HoldOffTime;

	/**
	 * Sets a flag to indicate ARO is to decrement
	 */
	public void ARO_SetDecFlag() {
	}

	/**
	 * Clears the decrement flag
	 */
	public void ARO_ClearDecFlag() {
	}

	/**
	 * Enables/disables reconfiguration on ARO counter reaching 0
	 * @param state 
	 */
	public void ARO_Enable_reconfig_flag_Alarm(FLAG_STATES state) {
	}

	/**
	 * Sets the current ARO max value for a given mode
	  * mode is mode number
	  * value is the value of max ARO 
	  * return void
	 * @param mode 
	 * @param value 
	 */
	private void ARO_SetCounterMax(int mode, int value) {
	}

	/**
	 * Updates the ARO counter and takes action on it reaching 0
	 */
	public void ARO_Update() {
	}

	/**
	 * Reset the ARO counter
	 */
	public void ARO_Reset() {
	}

	/**
	 *  Updates  the ARO hold off time (wait for mode to stabilise) value depending on the input mode
	 * @param newMode 
	 */
	public void ARO_SetHoldOff(AOCS_RTP.AOCS_State_Machine.AOCS_MODES newMode) {
		long tNow = 0;

		/* get currrent time */
		tNow = System.currentTimeMillis();

		/* set new ARO hold off time */
		ARO_HoldOffTime = tNow + AROH_holdOffPeriod[AOCS_State_Machine.modeIndexMap.get(newMode)];
	}

	/**
	 * Reconfigure
	  * 
	  * reconfigures the AOCS units depending on the state and mode
	  * this is in accordance with the satellite's FDIR strategy
	 * @param mode 
	 * @return 
	 */
	public AOCS_RTP.AOCS_State_Machine.AOCS_MODES Reconfigure(AOCS_RTP.AOCS_State_Machine.AOCS_MODES mode) {
		AOCS_State_Machine.AOCS_MODES newMode;
		/* 
		 * set reconfig state 
		 */
		//AROH_reconfigState = RCON_RECONFIG1;

		/*
		 *  set safe mode to standby 
		 */
		newMode = AOCS_State_Machine.AOCS_MODES.SBM;

		/*  
		 * kick off a safe mode transition
		 */
		AOCS_Shell.aocs_State_Machine.AOCS_SafeModeTransition(newMode);

		/* 
		 * return new mode
		 */
		return newMode;
	}
}
