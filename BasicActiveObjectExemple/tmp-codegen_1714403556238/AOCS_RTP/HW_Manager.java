// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package AOCS_RTP;

/************************************************************/
/**
 * 
 */
public class HW_Manager {
	/**
	 * number of devices supported by the AIM
	 */
	public int AIM_NUM_SAS = 2;
	/**
	 * 
	 */
	public int AIM_NUM_MTM = 1;
	/**
	 * 
	 */
	public int AIM_NUM_MTQ = 3;
	/**
	 * AIM unsolicted tlm group
	 */
	public int UTLM_SAS_RAW_GROUP_ID;
	/**
	 * 
	 */
	public int UTLM_SAS_LIM_GROUP_ID;
	/**
	 * 
	 */
	public int UTLM_MTM_GROUP_ID;
	/**
	 * AIM command
	 */
	public int AIMCMD_MTQ;
	/**
	 * 
	 */
	public int AIMCMD_WHEELs;
	/**
	 * AIM Telemetry
	 */
	public int AIMTLM_MTM;
	/**
	 * 
	 */
	public int AIMTLM_SAS0_AZ_A;
	/**
	 * 
	 */
	public int AIMTLM_SAS0_AZ_B;
	/**
	 * 
	 */
	public int AIMTLM_SAS0_EL_A;
	/**
	 * 
	 */
	public int AIMTLM_SAS0_EL_B;
	/**
	 * 
	 */
	public static AOCS_RTP.AOCS_State_Machine.AOCS_MODES HMGR_mode;

	/**
	 * set the current AIM frame size
	 * @param frameSize 
	 */
	public void UpdateAimPeriod(int frameSize) {
	}

	/**
	 *  set the working aim sample time value must be less than 1000
	 * @param sampleTime 
	 */
	public void SetAimSampleTime(int sampleTime) {
	}

	/**
	 * set the working aim actuate time value must be less than 1000
	 * @param time 
	 */
	public void SetAimActuateTime(int time) {
	}

	/**
	 * Converts the alg cmd value for mtq into correct format for tcmd
	 * @param values 
	 */
	public void SetMtqCmdValues(int values) {
	}

	/**
	 * Actuate Magnetorquers
	 * @param cmdID hardware id
	 * @param cmdVal commanding values from algs
	 * @param cmdFlag enable disbale flag
	 */
	public void ActuateMtq(int cmdID, int cmdVal, boolean cmdFlag) {
	}

	/**
	 * for each sun sensor find the aim it is attached to and the sasID on that AIM
	 */
	public void Generate_SAS_To_AIM_Mapping() {
	}

	/**
	 * SOLICITED TLM FUNCTIONS
	 * @param tlmPacket 
	 */
	public void InitSampleMtm(int tlmPacket) {
	}

	/**
	 * setup telemetry frame request for all the relevant frames of that sun sensor
	 * @param tlmPacket 
	 */
	public void InitSampleSas(int tlmPacket) {
	}

	/**
	 * get suns sensor data from can frame
	 * @param recvTlmBuf 
	 */
	public void SetSasSampleTlm(byte recvTlmBuf) {
	}

	/**
	 * get mtm data from can frame
	 * @param recvTlmBuf 
	 */
	public void SetMtmSampleTlm(byte recvTlmBuf) {
	}

	/**
	 * Proceed MTM data
	 */
	public void ProcMtmData() {
	}

	/**
	 * UNSOLICITED TLM FUNCTIONS
	 */
	public void UTLM_AIMInit() {
	}

	/**
	 * UNSOLICITED TLM FUNCTIONS
	 */
	public void UTLM_AIMInitDataGathering() {
	}

	/**
	 * UNSOLICITED TLM FUNCTIONS
	 */
	public void UTLM_SasInit() {
	}

	/**
	 * Processes an incoming unsolicted AIM telemetry frame
	 * @param pData 
	 */
	public void UTLM_ProcAimTlm(byte pData) {
	}

	/**
	 * Sets the Sun sensor data & validity based on the received tlm
	 * @param pTTC 
	 */
	public void UTLM_SetSasData(byte pTTC) {
	}

	/**
	 * Sets the magnetometer data & validity based on the received tlm
	 * @param pTTC 
	 */
	public void UTLM_SetMtmData(byte pTTC) {
	}

	/**
	 * 
	 * @param newMode signal to units the new mode
	 */
	public void HMGR_InitMode(AOCS_RTP.AOCS_State_Machine.AOCS_MODES newMode) {
		/* updatet the mode in hw */
		HMGR_mode = newMode;
	}

	/**
	 * Sets the Microsat wheel data & validity based on the received tlm & if enabled
	 * @param pTtc 
	 */
	public void UTLM_SetWheelData(byte pTtc) {
	}

	/**
	 *  Actuate Microsat wheels
	 * @param cmdID hardware id
	 * @param cmdVal cmd value
	 * @param cmdFlag enable disable flag
	 */
	public void ActuateMWheels(int cmdID, int cmdVal, boolean cmdFlag) {
	}

	/**
	 * Proceses an incoming unsolicted microsat wheel telemetry frame
	 * @param wheelNo 
	 * @param pData 
	 */
	public void ProcWheelTlm(int wheelNo, byte pData) {
	}

	/**
	 * 
	 * @param tlmPacket 
	 */
	public void InitSampleMWhl(byte tlmPacket) {
	}

	/**
	 * UNSOLICITED TLM FUNCTIONS
	 */
	public void UTLM_MWInitDataGathering() {
	}

	/**
	 * 
	 * @param recvTlmBuf 
	 */
	public void SetMWhlSampleTlm(byte recvTlmBuf) {
	}

	/**
	 * Send out the actuator commands.
	  * This function converts the data provided by the AOCS algorithms
	  * into the commands required by the AOCS hardware.
	 * @param algs_tcmd 
	 */
	public void HMGR_Actuate(AOCS_RTP.ALGS_Interface.ALGS_TCMD algs_tcmd) {
		/* no action in standby mode */
		if (HMGR_mode == AOCS_State_Machine.AOCS_MODES.SBM) {
			return;
		}

		/* actuate mtq */
		ActuateMtq(algs_tcmd.torquerID, algs_tcmd.torquerValue, algs_tcmd.mtqEnableFlag);

		/* actuate microsat wheels */
		ActuateMWheels(algs_tcmd.wheelID, algs_tcmd.wheelValue, algs_tcmd.whlEnableFlag);
	}
}
